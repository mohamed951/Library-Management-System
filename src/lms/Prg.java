/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LMS;

import java.awt.BorderLayout;
import java.awt.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.StringTokenizer;
import net.proteanit.sql.DbUtils;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.KeyEvent;
import javax.swing.plaf.basic.BasicTabbedPaneUI;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicTabbedPaneUI;
public class Prg extends javax.swing.JFrame {

    private final String url = "jdbc:sqlserver://localhost\\scvmm;databaseName=LMS;integratedSecurity=true;";
    private String IDofBook;

    public Prg() {
       initComponents();
        jTabbedPane6.setOpaque(true);
        jTabbedPane6.setBackground(new java.awt.Color(51,25,0));
    /*    jTabbedPane6.setBackgroundAt(0,Color.red);
        jTabbedPane6.setBackgroundAt(1,Color.green);
        jTabbedPane6.setBackgroundAt(2,Color.black);
        jTabbedPane6.setBackgroundAt(3,Color.GRAY);
      */  
        jLabel24.setToolTipText(url);
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        Buy_Table.setFillsViewportHeight(true);
        Bor_Table.setFillsViewportHeight(true);
        Table.setFillsViewportHeight(true);
        Table.setAutoCreateRowSorter(true);
    
        fillTable();
        fillBookBuy();
        fillBookBor();
        fillBuy();
        fillBor();


    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jFrame1 = new javax.swing.JFrame();
        jDialog2 = new javax.swing.JDialog();
        jDialog3 = new javax.swing.JDialog();
        jFrame2 = new javax.swing.JFrame();
        popupMenu1 = new java.awt.PopupMenu();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        Store = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        B_ID = new javax.swing.JTextField();
        B_Name = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        Author = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Buy_Quantity = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Bor_Quantity = new javax.swing.JTextField();
        Publisher = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        ADD = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Bor_Price = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Buy_Price = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        Category = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        Borrow = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Bor_List = new javax.swing.JList<String>();
        jLabel7 = new javax.swing.JLabel();
        Return_Bor_To__Store = new javax.swing.JButton();
        ADD_TO_Bor_LIST = new javax.swing.JButton();
        BorrowOpertion = new javax.swing.JButton();
        Bor_Search = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        Books_Bor_List = new javax.swing.JList<String>();
        jLabel20 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SSN = new javax.swing.JTextField();
        Phone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        BDate = new javax.swing.JTextField();
        UserName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        Email = new javax.swing.JTextField();
        New_SSN = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Save_Member = new javax.swing.JButton();
        Search_SSN = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        Buy = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Books_Buy_List = new javax.swing.JList<String>();
        BuyOperation = new javax.swing.JButton();
        Return_To_Store = new javax.swing.JButton();
        ADD_TO_BUY_LIST = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Buy_Search = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        Buy_List = new javax.swing.JList<String>();
        jLabel22 = new javax.swing.JLabel();
        Sales = new javax.swing.JPanel();
        Delete_Buy = new javax.swing.JButton();
        Back_Buy = new javax.swing.JButton();
        Jscroll = new javax.swing.JScrollPane();
        Buy_Table = new javax.swing.JTable();
        Back_Bor = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        Bor_Table = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        popupMenu1.setLabel("popupMenu1");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setOpaque(false);

        jTabbedPane6.setBackground(new java.awt.Color(204, 204, 204));
        jTabbedPane6.setForeground(new java.awt.Color(255, 255, 255));
        jTabbedPane6.setToolTipText("");

        Store.setLayout(null);

        jLabel10.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Book name");
        Store.add(jLabel10);
        jLabel10.setBounds(50, 90, 110, 26);

        B_ID.setBackground(new java.awt.Color(102, 102, 102));
        B_ID.setForeground(new java.awt.Color(255, 255, 255));
        B_ID.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        B_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_IDActionPerformed(evt);
            }
        });
        Store.add(B_ID);
        B_ID.setBounds(240, 30, 160, 30);

        B_Name.setBackground(new java.awt.Color(102, 102, 102));
        B_Name.setForeground(new java.awt.Color(255, 255, 255));
        B_Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_NameActionPerformed(evt);
            }
        });
        Store.add(B_Name);
        B_Name.setBounds(240, 80, 160, 30);

        jLabel11.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Publisher");
        Store.add(jLabel11);
        jLabel11.setBounds(50, 280, 110, 26);

        Author.setBackground(new java.awt.Color(102, 102, 102));
        Author.setForeground(new java.awt.Color(255, 255, 255));
        Author.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorActionPerformed(evt);
            }
        });
        Store.add(Author);
        Author.setBounds(240, 130, 160, 30);

        jLabel12.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Author");
        Store.add(jLabel12);
        jLabel12.setBounds(50, 140, 79, 26);

        Buy_Quantity.setBackground(new java.awt.Color(102, 102, 102));
        Buy_Quantity.setForeground(new java.awt.Color(255, 255, 255));
        Store.add(Buy_Quantity);
        Buy_Quantity.setBounds(240, 180, 160, 30);

        jLabel13.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Buy Quantity");
        Store.add(jLabel13);
        jLabel13.setBounds(50, 180, 160, 26);

        jLabel14.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Borrow Quantity");
        Store.add(jLabel14);
        jLabel14.setBounds(50, 230, 190, 26);

        Bor_Quantity.setBackground(new java.awt.Color(102, 102, 102));
        Bor_Quantity.setForeground(new java.awt.Color(255, 255, 255));
        Store.add(Bor_Quantity);
        Bor_Quantity.setBounds(240, 230, 160, 30);

        Publisher.setBackground(new java.awt.Color(102, 102, 102));
        Publisher.setForeground(new java.awt.Color(255, 255, 255));
        Store.add(Publisher);
        Publisher.setBounds(240, 280, 160, 30);

        jLabel15.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("ID");
        Store.add(jLabel15);
        jLabel15.setBounds(50, 30, 80, 26);

        jLabel16.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Category");
        Store.add(jLabel16);
        jLabel16.setBounds(50, 330, 130, 26);

        ADD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Add Buttom (1).png"))); // NOI18N
        ADD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ADD.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Add Buttom.png"))); // NOI18N
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });
        Store.add(ADD);
        ADD.setBounds(500, 120, 120, 50);

        Delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Delete Buttom (1).png"))); // NOI18N
        Delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Delete.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Delete Buttom.png"))); // NOI18N
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        Store.add(Delete);
        Delete.setBounds(500, 220, 120, 50);

        Update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Update Buttom (1).png"))); // NOI18N
        Update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Update.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Update Buttom.png"))); // NOI18N
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        Store.add(Update);
        Update.setBounds(500, 300, 120, 50);

        Bor_Price.setBackground(new java.awt.Color(102, 102, 102));
        Bor_Price.setForeground(new java.awt.Color(255, 255, 255));
        Bor_Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bor_PriceActionPerformed(evt);
            }
        });
        Store.add(Bor_Price);
        Bor_Price.setBounds(240, 380, 160, 30);

        jLabel17.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Borrow Price");
        Store.add(jLabel17);
        jLabel17.setBounds(50, 380, 140, 26);

        Buy_Price.setBackground(new java.awt.Color(102, 102, 102));
        Buy_Price.setForeground(new java.awt.Color(255, 255, 255));
        Store.add(Buy_Price);
        Buy_Price.setBounds(240, 430, 160, 30);

        jLabel18.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Buy Price");
        Store.add(jLabel18);
        jLabel18.setBounds(50, 430, 140, 26);

        Category.setBackground(new java.awt.Color(102, 102, 102));
        Category.setForeground(new java.awt.Color(255, 255, 255));
        Store.add(Category);
        Category.setBounds(240, 330, 160, 30);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        Table.setBackground(new java.awt.Color(102, 102, 102));
        Table.setForeground(new java.awt.Color(255, 255, 255));
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Buy Price", "Buy Quantity", "Bor Price", "Bor Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        Table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(Table);

        Store.add(jScrollPane2);
        jScrollPane2.setBounds(670, 110, 597, 220);

        jLabel24.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/BG2.png"))); // NOI18N
        jLabel24.setLabelFor(jTabbedPane6);
        Store.add(jLabel24);
        jLabel24.setBounds(0, 0, 1420, 710);

        jTabbedPane6.addTab("                   Store                 ", Store);

        Borrow.setLayout(null);

        Bor_List.setBackground(new java.awt.Color(102, 102, 102));
        Bor_List.setForeground(new java.awt.Color(255, 255, 255));
        Bor_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(Bor_List);

        Borrow.add(jScrollPane3);
        jScrollPane3.setBounds(580, 80, 180, 290);

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Search");
        Borrow.add(jLabel7);
        jLabel7.setBounds(900, 30, 60, 26);

        Return_Bor_To__Store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Move Right Buttom (1).png"))); // NOI18N
        Return_Bor_To__Store.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Return_Bor_To__Store.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Move Right Buttom.png"))); // NOI18N
        Return_Bor_To__Store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Return_Bor_To__StoreActionPerformed(evt);
            }
        });
        Borrow.add(Return_Bor_To__Store);
        Return_Bor_To__Store.setBounds(860, 220, 30, 40);

        ADD_TO_Bor_LIST.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/move left Buttom (1).png"))); // NOI18N
        ADD_TO_Bor_LIST.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ADD_TO_Bor_LIST.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/move left Buttom.png"))); // NOI18N
        ADD_TO_Bor_LIST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADD_TO_Bor_LISTActionPerformed(evt);
            }
        });
        Borrow.add(ADD_TO_Bor_LIST);
        ADD_TO_Bor_LIST.setBounds(860, 280, 30, 40);

        BorrowOpertion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Borrow Buttom (1).png"))); // NOI18N
        BorrowOpertion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BorrowOpertion.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Borrow Buttom.png"))); // NOI18N
        BorrowOpertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrowOpertionActionPerformed(evt);
            }
        });
        Borrow.add(BorrowOpertion);
        BorrowOpertion.setBounds(820, 430, 120, 50);

        Bor_Search.setBackground(new java.awt.Color(102, 102, 102));
        Bor_Search.setForeground(new java.awt.Color(255, 255, 255));
        Bor_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bor_SearchActionPerformed(evt);
            }
        });
        Bor_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Bor_SearchKeyReleased(evt);
            }
        });
        Borrow.add(Bor_Search);
        Bor_Search.setBounds(970, 30, 170, 30);

        Books_Bor_List.setBackground(new java.awt.Color(102, 102, 102));
        Books_Bor_List.setForeground(new java.awt.Color(255, 255, 255));
        Books_Bor_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(Books_Bor_List);

        Borrow.add(jScrollPane4);
        jScrollPane4.setBounds(1000, 80, 180, 290);

        jLabel20.setLabelFor(Borrow);
        Borrow.add(jLabel20);
        jLabel20.setBounds(0, 0, 378, 0);

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Phone");
        Borrow.add(jLabel5);
        jLabel5.setBounds(40, 150, 90, 26);

        SSN.setBackground(new java.awt.Color(102, 102, 102));
        SSN.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(SSN);
        SSN.setBounds(110, 370, 161, 30);

        Phone.setBackground(new java.awt.Color(102, 102, 102));
        Phone.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(Phone);
        Phone.setBounds(160, 150, 211, 30);

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("SSN");
        Borrow.add(jLabel3);
        jLabel3.setBounds(40, 370, 58, 26);

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Username");
        Borrow.add(jLabel2);
        jLabel2.setBounds(40, 70, 110, 26);

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("End");
        Borrow.add(jLabel6);
        jLabel6.setBounds(40, 320, 44, 26);

        BDate.setBackground(new java.awt.Color(102, 102, 102));
        BDate.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(BDate);
        BDate.setBounds(110, 320, 100, 30);

        UserName.setBackground(new java.awt.Color(102, 102, 102));
        UserName.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(UserName);
        UserName.setBounds(160, 70, 211, 30);

        jLabel4.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("(yyyy-mm-dd)");
        Borrow.add(jLabel4);
        jLabel4.setBounds(220, 320, 160, 20);

        jLabel19.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Email");
        Borrow.add(jLabel19);
        jLabel19.setBounds(40, 190, 60, 26);

        Email.setBackground(new java.awt.Color(102, 102, 102));
        Email.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(Email);
        Email.setBounds(160, 190, 211, 30);

        New_SSN.setBackground(new java.awt.Color(102, 102, 102));
        New_SSN.setForeground(new java.awt.Color(255, 255, 255));
        Borrow.add(New_SSN);
        New_SSN.setBounds(160, 110, 211, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("SSN");
        Borrow.add(jLabel8);
        jLabel8.setBounds(40, 110, 58, 26);

        jLabel9.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("New Customer");
        Borrow.add(jLabel9);
        jLabel9.setBounds(130, 10, 130, 26);

        Save_Member.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Save Buttom (1).png"))); // NOI18N
        Save_Member.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Save_Member.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Save Buttom.png"))); // NOI18N
        Save_Member.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_MemberActionPerformed(evt);
            }
        });
        Borrow.add(Save_Member);
        Save_Member.setBounds(190, 240, 120, 50);

        Search_SSN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/SSn (1).png"))); // NOI18N
        Search_SSN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Search_SSN.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/SSn.png"))); // NOI18N
        Search_SSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search_SSNActionPerformed(evt);
            }
        });
        Borrow.add(Search_SSN);
        Search_SSN.setBounds(140, 450, 100, 40);

        jLabel23.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/BG2.png"))); // NOI18N
        Borrow.add(jLabel23);
        jLabel23.setBounds(0, 0, 1420, 710);

        jTabbedPane6.addTab("              Borrow               ", Borrow);

        Buy.setLayout(null);

        Books_Buy_List.setBackground(new java.awt.Color(102, 102, 102));
        Books_Buy_List.setForeground(new java.awt.Color(255, 255, 255));
        Books_Buy_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(Books_Buy_List);

        Buy.add(jScrollPane1);
        jScrollPane1.setBounds(770, 110, 203, 287);

        BuyOperation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Buy Buttom (1).png"))); // NOI18N
        BuyOperation.setActionCommand("c");
        BuyOperation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BuyOperation.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Buy Buttom.png"))); // NOI18N
        BuyOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyOperationActionPerformed(evt);
            }
        });
        Buy.add(BuyOperation);
        BuyOperation.setBounds(560, 480, 120, 50);

        Return_To_Store.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Move Right Buttom (1).png"))); // NOI18N
        Return_To_Store.setBorder(null);
        Return_To_Store.setBorderPainted(false);
        Return_To_Store.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Return_To_Store.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Move Right Buttom.png"))); // NOI18N
        Return_To_Store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Return_To_StoreActionPerformed(evt);
            }
        });
        Buy.add(Return_To_Store);
        Return_To_Store.setBounds(630, 210, 30, 40);

        ADD_TO_BUY_LIST.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/move left Buttom (1).png"))); // NOI18N
        ADD_TO_BUY_LIST.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ADD_TO_BUY_LIST.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/move left Buttom.png"))); // NOI18N
        ADD_TO_BUY_LIST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADD_TO_BUY_LISTActionPerformed(evt);
            }
        });
        Buy.add(ADD_TO_BUY_LIST);
        ADD_TO_BUY_LIST.setBounds(630, 290, 30, 40);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Search");
        Buy.add(jLabel1);
        jLabel1.setBounds(740, 40, 70, 26);

        Buy_Search.setBackground(new java.awt.Color(153, 153, 153));
        Buy_Search.setForeground(new java.awt.Color(255, 255, 255));
        Buy_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buy_SearchActionPerformed(evt);
            }
        });
        Buy_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Buy_SearchKeyReleased(evt);
            }
        });
        Buy.add(Buy_Search);
        Buy_Search.setBounds(830, 40, 176, 30);

        Buy_List.setBackground(new java.awt.Color(102, 102, 102));
        Buy_List.setForeground(new java.awt.Color(255, 255, 255));
        Buy_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Buy_List.setToolTipText("");
        jScrollPane8.setViewportView(Buy_List);

        Buy.add(jScrollPane8);
        jScrollPane8.setBounds(290, 110, 202, 282);

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/BG2.png"))); // NOI18N
        Buy.add(jLabel22);
        jLabel22.setBounds(0, 0, 1430, 710);

        jTabbedPane6.addTab("                    Buy                  ", Buy);

        Sales.setLayout(null);

        Delete_Buy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Delete Buttom (1).png"))); // NOI18N
        Delete_Buy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Delete_Buy.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Delete Buttom.png"))); // NOI18N
        Delete_Buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_BuyActionPerformed(evt);
            }
        });
        Sales.add(Delete_Buy);
        Delete_Buy.setBounds(860, 410, 110, 50);

        Back_Buy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Button-Back-1-512 (1).png"))); // NOI18N
        Back_Buy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Back_Buy.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Button-Back-1-512.png"))); // NOI18N
        Back_Buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_BuyActionPerformed(evt);
            }
        });
        Sales.add(Back_Buy);
        Back_Buy.setBounds(1040, 410, 110, 50);

        Jscroll.setBackground(new java.awt.Color(51, 51, 51));

        Buy_Table.setBackground(new java.awt.Color(102, 102, 102));
        Buy_Table.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 0, 0)));
        Buy_Table.setForeground(new java.awt.Color(255, 255, 255));
        Buy_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Buy_ID", "Book Name", "Date", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Jscroll.setViewportView(Buy_Table);

        Sales.add(Jscroll);
        Jscroll.setBounds(760, 210, 452, 160);

        Back_Bor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Button-Back-1-512 (1).png"))); // NOI18N
        Back_Bor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Back_Bor.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/Button-Back-1-512.png"))); // NOI18N
        Back_Bor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_BorActionPerformed(evt);
            }
        });
        Sales.add(Back_Bor);
        Back_Bor.setBounds(230, 410, 110, 50);

        Bor_Table.setBackground(new java.awt.Color(102, 102, 102));
        Bor_Table.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(51, 51, 51)));
        Bor_Table.setForeground(new java.awt.Color(255, 255, 255));
        Bor_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Bor_ID", "Book_Name", "Date", "Customer_Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(Bor_Table);

        Sales.add(jScrollPane9);
        jScrollPane9.setBounds(70, 210, 452, 160);

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/newwwwwww1.png"))); // NOI18N
        Sales.add(jLabel26);
        jLabel26.setBounds(900, 40, 200, 150);

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/neww borrow111.png"))); // NOI18N
        Sales.add(jLabel27);
        jLabel27.setBounds(200, 30, 250, 160);

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/BG2.png"))); // NOI18N
        Sales.add(jLabel21);
        jLabel21.setBounds(0, 0, 1420, 710);

        jTabbedPane6.addTab("                  Sales                 ", Sales);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1425, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql1 = "select ID from Book where ID='" + B_ID.getText() + "' ";
            res = stat.executeQuery(sql1);
            if (res.next()) {
                JOptionPane.showMessageDialog(null, "The ID You Enter is already Exist");
                return;
            }
            if (B_ID.getText().isEmpty() || B_Name.getText().isEmpty() || Publisher.getText().isEmpty() || Author.getText().isEmpty() || Category.getText().isEmpty() || Bor_Price.getText().isEmpty() || Bor_Quantity.getText().isEmpty() || Buy_Price.getText().isEmpty() || Buy_Quantity.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "There is Field or more are Empty");
                return;
            }
            if (ISdouble(B_Name.getText()) || !ISstring(Publisher.getText()) || !ISstring(Author.getText()) || !ISstring(Category.getText()) || !ISdouble(Bor_Price.getText()) || !ISint(Bor_Quantity.getText()) || !ISdouble(Buy_Price.getText()) || !ISint(Buy_Quantity.getText())) {
                JOptionPane.showMessageDialog(null, "Unexpected Value in the Fields ");
                return;
            }
            if (B_ID.getText().length() != 8) {
                JOptionPane.showMessageDialog(null, "BookID isn't 8 Digit length ");
                return;
            }
            if (Double.parseDouble(Bor_Price.getText()) <= 0 && Double.parseDouble(Buy_Price.getText()) <= 0) {
                JOptionPane.showMessageDialog(null, "Book Price or Buy Price has invalid data ");
                return;
            }
            String sql2 = "INSERT INTO Book Values ('" + B_ID.getText() + "', '" + B_Name.getText() + "', '" + Publisher.getText() + "','" + Author.getText() + "', '" + Category.getText() + "')";
            String sql3 = "INSERT INTO Bor_Book Values ('" + B_ID.getText() + "'," + Bor_Price.getText() + " , " + Bor_Quantity.getText() + " )";
            String sql4 = "INSERT INTO Buy_Book Values ('" + B_ID.getText() + "', " + Buy_Price.getText() + " , " + Buy_Quantity.getText() + ")";
            System.out.println("SUCESS");
            stat.executeUpdate(sql2);
            stat.executeUpdate(sql3);
            stat.executeUpdate(sql4);
            fillTable();
            ClearStoresFiled();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                }
            }
            if (stat != null) {
                try {
                    stat.close();
                } catch (Exception e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (Exception e) {
                }
            }
        }
        fillTable();
        ClearStoresFiled();
    }//GEN-LAST:event_ADDActionPerformed

    private void Bor_PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bor_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bor_PriceActionPerformed

    private void B_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_B_IDActionPerformed

    private void B_NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_B_NameActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;

        String ID = B_ID.getText();
        if (!removExtSpaces(ID).equals(removExtSpaces(IDofBook))) {
            JOptionPane.showMessageDialog(null, "You Can't Change ID of Book\n id is" + IDofBook + ID);
            return;
        } else {
            try {
                con = DriverManager.getConnection(url);
                stat = con.createStatement();
                String sql1 = "Update Book set Title= '" + B_Name.getText() + "', Publisher = '" + Publisher.getText() + "', Author = '" + Author.getText() + "', Category = '" + Category.getText() + "' where Book.ID='" + ID + "' ";
                String sql2 = "Update Buy_Book set Buy_Book.Buy_Price= '" + Buy_Price.getText() + "',Buy_Book.Buy_Quantity= '" + Buy_Quantity.getText() + "' where B_ID='" + ID + "' ";
                String sql3 = "Update Bor_Book set Bor_Book.Bor_Price= '" + Bor_Price.getText() + "',Bor_Book.Bor_Quantity= '" + Bor_Quantity.getText() + "' where B_ID='" + ID + "' ";
                System.out.println("SUCESS");
                stat.executeUpdate(sql1);
                stat.executeUpdate(sql2);
                stat.executeUpdate(sql3);
                ClearStoresFiled();
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                if (res != null) {
                    try {
                        res.close();
                    } catch (Exception e) {
                    }
                }
                if (stat != null) {
                    try {
                        stat.close();
                    } catch (Exception e) {
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (Exception e) {
                    }
                }
            }
        }
        fillTable();
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        if(Table.getSelectedRow()==-1)
            return;
        String x = (String) Table.getValueAt(Table.getSelectedRow(), 0);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;

        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Delete Book where Book.ID='" + x + "' ";
            String sql2 = "Delete Bor_Book where B_ID='" + x + "' ";
            String sql3 = "Delete Buy_Book where  B_ID='" + x + "' ";
            
            System.out.println("SUCESS");
            stat.executeUpdate(sql);
            stat.executeUpdate(sql2);
            stat.executeUpdate(sql3);
            ClearStoresFiled();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (res != null) {
                try {
                    res.close();
                } catch (Exception e) {
                }
            }
            if (stat != null) {
                try {
                    stat.close();
                } catch (Exception e) {
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (Exception e) {
                }
            }
        }
        fillTable();

    }//GEN-LAST:event_DeleteActionPerformed

    private void Buy_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buy_SearchActionPerformed

    }//GEN-LAST:event_Buy_SearchActionPerformed

    private void Buy_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Buy_SearchKeyReleased
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        if (Buy_Search.getText().isEmpty()) {
            fillBookBuy();
        } else {
            try {
                DefaultListModel dl = new DefaultListModel();
                con = DriverManager.getConnection(url);
                stat = con.createStatement();
                String sql = "Select Title,Buy_Book.Buy_Quantity from Book,Buy_Book where Book.ID=Buy_Book.B_ID AND Title like '%" + Buy_Search.getText() + "%' AND Buy_Book.Buy_Quantity>0";
                System.out.println("SUCESS");
                res = stat.executeQuery(sql);
                while (res.next()) {
                    String x = res.getString("Title");
                    int len = x.length();
                    for (int i = 0; i < 48 - len; i++) {
                        x += " ";
                    }
                    dl.addElement(x);
                }
                Books_Buy_List.setModel(dl);
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                try {
                    res.close();
                    stat.close();
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_Buy_SearchKeyReleased
    DefaultListModel BuyList = new DefaultListModel();
    private void Return_To_StoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Return_To_StoreActionPerformed
        if (Buy_List.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "No Book is Selected");
            return;
        }
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Update Buy_Book Set Buy_Book.Buy_Quantity=Buy_Book.Buy_Quantity+1 where B_ID = (Select ID from Book Where Title= '" + Buy_List.getSelectedValue() + "')";
            stat.executeUpdate(sql);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        BuyList.remove(Buy_List.getSelectedIndex());
        Buy_List.setModel(BuyList);
        fillBookBuy();
    }//GEN-LAST:event_Return_To_StoreActionPerformed
    DefaultListModel BorList = new DefaultListModel();
    private void TableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableKeyPressed

    }//GEN-LAST:event_TableKeyPressed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        String ID = (String) Table.getValueAt(Table.getSelectedRow(), 0);
    //    System.out.println(ID);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "SELECT * from Book,Buy_Book,Bor_Book where Buy_Book.B_ID=Book.ID AND Bor_Book.B_ID=Book.ID AND Book.ID = '" + ID + "'";
            res = stat.executeQuery(sql);
            if (res.next()) {
                B_ID.setText(removExtSpaces(res.getString("ID")));
                B_Name.setText(removExtSpaces(res.getString("Title")));
                Author.setText(removExtSpaces(res.getString("Author")));
                Buy_Quantity.setText(res.getString("Buy_Quantity"));
                Bor_Quantity.setText(res.getString("Bor_Quantity"));
                Publisher.setText(removExtSpaces(res.getString("Publisher")));
                Category.setText(removExtSpaces(res.getString("Category")));
                Bor_Price.setText(res.getString("Bor_Price"));
                Buy_Price.setText(res.getString("Buy_Price"));
                IDofBook = B_ID.getText();
                System.out.println(res.getString("Buy_Quantity"));
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }

    }//GEN-LAST:event_TableMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void Back_BorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_BorActionPerformed
        if (Bor_Table.getSelectedRow() == -1) {
            return;
        }
        int BorID = (int) Bor_Table.getValueAt(Bor_Table.getSelectedRow(), 0);
        String BookName = (String) Bor_Table.getValueAt(Bor_Table.getSelectedRow(), 1);

        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql1 = "Update Bor_Book Set Bor_Book.Bor_Quantity=Bor_Book.Bor_Quantity+1 where B_ID = (Select B_ID from Borrow Where Bor_ID= '" + BorID + "')";
            String sql2 = "Delete from Borrow Where Bor_ID= " + BorID + " ";
            stat.executeUpdate(sql1);
            stat.executeUpdate(sql2);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        fillBor();
    }//GEN-LAST:event_Back_BorActionPerformed

    private void BuyOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyOperationActionPerformed
        ListModel model = Buy_List.getModel();
        double result = 0;
        if (model.getSize() == 0) {
            JOptionPane.showMessageDialog(null, "NO Selected Book");
        } else {
            for (int i = 0; i < model.getSize(); i++) {
                Object o = model.getElementAt(i);
                Connection con = null;
                Statement stat = null;
                ResultSet res = null;
                try {
                    con = DriverManager.getConnection(url);
                    stat = con.createStatement();
                    String sql1 = "Select ID from Book where Title= '" + (String) o + "'";
                    res = stat.executeQuery(sql1);
                    res.next();
                    String BookID = res.getString("ID");
                    String sql2 = "Select Buy_Price from Buy_Book Where B_ID='" + BookID + "'";
                    res = stat.executeQuery(sql2);
                    res.next();
                    result += Double.parseDouble(res.getString("Buy_Price"));
                   
                    String sql3 = "Insert into Buy values('" + BookID + "',GETDATE())";
                    stat.executeUpdate(sql3);
                    fillBuy();
                } catch (Exception e) {
                    System.out.println(e);
                } finally {
                    try {
                        res.close();
                        stat.close();
                    } catch (Exception e) {
                    }
                }
            }
             JOptionPane.showMessageDialog(null, "BILL IS :" + result);
        }
    }//GEN-LAST:event_BuyOperationActionPerformed

    private void Delete_BuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_BuyActionPerformed
        if (Buy_Table.getSelectedRow() == -1) {
                 return;
             }
        Buy_Table.getValueAt(Buy_Table.getSelectedRow(),0);
        int x = (int) Buy_Table.getValueAt(Buy_Table.getSelectedRow(), 0);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Delete from Buy Where Buy_ID = '" + x + "' ";
            stat.executeUpdate(sql);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        fillBuy();
    }//GEN-LAST:event_Delete_BuyActionPerformed

    private void Back_BuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_BuyActionPerformed
        if (Buy_Table.getSelectedRow() == -1) {
            return;
        }
        int x = (int) Buy_Table.getValueAt(Buy_Table.getSelectedRow(), 0);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql1 = "Update Buy_Book Set Buy_Book.Buy_Quantity=Buy_Book.Buy_Quantity+1 where B_ID = (Select B_ID from Buy where Buy_ID= '" + x + "')";
            String sql2 = "Delete from Buy Where Buy_ID = '" + x + "' ";
            stat.executeUpdate(sql1);
            stat.executeUpdate(sql2);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        fillBuy();
    }//GEN-LAST:event_Back_BuyActionPerformed

    private void Save_MemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_MemberActionPerformed

        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        if (UserName.getText().isEmpty() || New_SSN.getText().isEmpty() || Phone.getText().isEmpty() || Email.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "There is field or more is Empty");
            return;
        }
        if (!ISstring(UserName.getText())) {
            JOptionPane.showMessageDialog(null, "UserName Shouldn't Contain numbers");
            return;
        }
        if ((New_SSN.getText().length() != 14) || (!ISint(New_SSN.getText()))) {
            JOptionPane.showMessageDialog(null, "SSN Should be 14 letters and does'nt contain letter ");
            return;
        }
        if ((Phone.getText().length() != 11) || (!ISint(Phone.getText()))) {
            JOptionPane.showMessageDialog(null, "Phone Should be 11 letters and does'nt contain letter ");
            return;
        }
        if (ISint(Email.getText()) || !Email.getText().contains("@")) {
            JOptionPane.showMessageDialog(null, "Email Should  contain @ and  does'nt contain only numbers");
            return;
        }
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Insert Into Member Values('" + New_SSN.getText() + "', '" + UserName.getText() + "', '" + Phone.getText() + "', '" + Email.getText() + "') ";
            stat.executeUpdate(sql);
            JOptionPane.showMessageDialog(null,"Successfully Adding New Customer");
            Email.setText("");
            Phone.setText("");
            New_SSN.setText("");
            UserName.setText("");
            
        } catch (Exception e) {
           JOptionPane.showMessageDialog(null,"You are trying to add existing Customer");
            return;
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        JOptionPane.showMessageDialog(null,"Customer Saved");

    }//GEN-LAST:event_Save_MemberActionPerformed

    private void Search_SSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search_SSNActionPerformed
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select ID from Member Where ID=('" + SSN.getText() + "') ";
            res = stat.executeQuery(sql);
            if (res.next()) {
                JOptionPane.showMessageDialog(null, "Existing Customer");
            } else {
                JOptionPane.showMessageDialog(null, "Not Exist");
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_Search_SSNActionPerformed

    private void AuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorActionPerformed

    private void ADD_TO_BUY_LISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADD_TO_BUY_LISTActionPerformed
        if (Books_Buy_List.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(null, "No Book is selected");
            return;
        }
        BuyList.addElement(Books_Buy_List.getSelectedValue());
        Buy_List.setModel(BuyList);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Update Buy_Book Set Buy_Quantity=Buy_Quantity-1 where B_ID = (Select ID from Book Where Title= '" + Books_Buy_List.getSelectedValue() + "')";
            stat.executeUpdate(sql);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        fillBookBuy();
    }//GEN-LAST:event_ADD_TO_BUY_LISTActionPerformed

    private void Bor_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Bor_SearchKeyReleased
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        if (Bor_Search.getText().isEmpty()) {
            fillBookBor();
        } else {
            try {
                DefaultListModel dl = new DefaultListModel();
                con = DriverManager.getConnection(url);
                stat = con.createStatement();
                String sql = "Select Title,Bor_Book.Bor_Quantity from Book,Bor_Book where Book.ID=Bor_Book.B_ID AND Title like '%" + Bor_Search.getText() + "%' AND Bor_Book.Bor_Quantity>0";
                System.out.println("SUCESS");
                res = stat.executeQuery(sql);
                while (res.next()) {
                    String x = res.getString("Title");
                    int len = x.length();
                    for (int i = 0; i < 37 - len; i++) {
                        x += " ";
                    }
                    dl.addElement(x);
                }
                Books_Bor_List.setModel(dl);
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                try {
                    res.close();
                    stat.close();
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_Bor_SearchKeyReleased

    private void Bor_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bor_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bor_SearchActionPerformed

    private void BorrowOpertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrowOpertionActionPerformed
                 
        if(Bor_List.getModel().getSize()==0){
                JOptionPane.showMessageDialog(null, "No Selected Book");
            return;
        }
        DefaultListModel model = (DefaultListModel) Bor_List.getModel();
        double result = 0, Total = 0;
        if (SSN.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "SSN is Empty");
            return;
        }
        if (BDate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Date is Empty");
            return;
        }
        if (!isDate(BDate.getText())) {
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            return;
        }
        for (int i = 0; i < model.getSize(); i++) {
            result = 0;
            Object o = model.getElementAt(i);
            Connection con = null;
            Statement stat = null;
            ResultSet res = null;
            try {
                con = DriverManager.getConnection(url);
                stat = con.createStatement();
                String sql = "Select ID from Member Where ID=('" + SSN.getText() + "') ";
                res = stat.executeQuery(sql);
                if (!res.next()) {
                    JOptionPane.showMessageDialog(null, "SNN Not Exist");
                    return;
                }
                String sql1 = "Select ID from Book where Title= '" + (String) o + "'";
                res = stat.executeQuery(sql1);
                res.next();
                String BookID = res.getString("ID");
                String sql2 = "Select Bor_Price from Bor_Book Where B_ID='" + BookID + "'";
                res = stat.executeQuery(sql2);
                res.next();
                result += Double.parseDouble(res.getString("Bor_Price"));
                String sql3 = "Insert Into Borrow Values( DATEDIFF(day,GETDATE(),'" + BDate.getText() + "'), '" + BDate.getText() + "',  '" + BookID + "', '" + SSN.getText() + "') ";
                stat.executeUpdate(sql3);
                res = stat.executeQuery("SELECT DATEDIFF(day,GETDATE(),'" + BDate.getText() + "') AS price");
                res.next();
                result *= (1 / 7.0) * Integer.parseInt(res.getString("price"));
                Total += result;
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                try {
                    res.close();
                    stat.close();
                } catch (Exception e) {
                }
            }

        }
        DecimalFormat D = new DecimalFormat("#.##");
        JOptionPane.showMessageDialog(null, "BILL IS : " + D.format(Total));
        BDate.setText("");
        SSN.setText("");
        model.removeAllElements();
        Bor_List.setModel(model);
        fillBor();
    }//GEN-LAST:event_BorrowOpertionActionPerformed

    private void ADD_TO_Bor_LISTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADD_TO_Bor_LISTActionPerformed
        if (Books_Bor_List.getSelectedValue() == null) {
    // JOptionPane.showMessageDialog(null, "No Book is Selected");
            return;
        }
        BorList.addElement(Books_Bor_List.getSelectedValue());
        Bor_List.setModel(BorList);
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Update Bor_Book Set Bor_Quantity=Bor_Quantity-1 where B_ID = (Select ID from Book Where Title= '" + Books_Bor_List.getSelectedValue() + "')";
            stat.executeUpdate(sql);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        fillBookBor();
    }//GEN-LAST:event_ADD_TO_Bor_LISTActionPerformed

    private void Return_Bor_To__StoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Return_Bor_To__StoreActionPerformed
        if (Bor_List.getSelectedValue() == null) {
           // JOptionPane.showMessageDialog(null, "No Book is Selected");
            return;
        }
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Update Bor_Book Set Bor_Book.Bor_Quantity=Bor_Book.Bor_Quantity+1 where B_ID = (Select ID from Book Where Title= '" + Bor_List.getSelectedValue() + "')";
            stat.executeUpdate(sql);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        BorList.remove(Bor_List.getSelectedIndex());
        Bor_List.setModel(BorList);
        fillBookBor();
    }//GEN-LAST:event_Return_Bor_To__StoreActionPerformed
    void ClearStoresFiled() {
        B_ID.setText("");
        B_Name.setText("");
        Publisher.setText("");
        Author.setText("");
        Category.setText("");
        Buy_Price.setText("");
        Buy_Quantity.setText("");
        Bor_Price.setText("");
        Bor_Quantity.setText("");
    }

    void fillTable() {
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select RTRIM(Book.ID) AS ID,RTRIM(Book.Title) AS Title,RTRIM(Book.Category) AS Category,Buy_Book.Buy_Price,Buy_Book.Buy_Quantity,Bor_Book.Bor_Price,Bor_Book.Bor_Quantity from Book,Bor_Book,Buy_Book "
                    + "Where Book.ID=Bor_Book.B_ID AND Book.ID=Buy_Book.B_ID";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            Table.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }

    void fillBookBuy() {
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            DefaultListModel dl = new DefaultListModel();
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select RTRIM(Title) As Title,Buy_Book.Buy_Quantity from Book,Buy_Book where Book.ID=Buy_Book.B_ID AND Buy_Book.Buy_Quantity>0";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            while (res.next()) {
                String x = res.getString("Title");
                int len = x.length();
                for (int i = 0; i < 48 - len; i++) {
                    x += " ";
                }
                dl.addElement(x);
            }
            Books_Buy_List.setModel(dl);
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }

    void fillBookBor() {
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            DefaultListModel dl = new DefaultListModel();
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select RTRIM(Title) as Title,Bor_Book.Bor_Quantity from Book,Bor_Book where Book.ID=Bor_Book.B_ID AND Bor_Book.Bor_Quantity>0";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            while (res.next()) {
                String x = res.getString("Title");
                int len = x.length();
                for (int i = 0; i < 37 - len; i++) {
                    x += " ";
                }
                dl.addElement(x);
            }
            Books_Bor_List.setModel(dl);

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }

    void fillBuy() {
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select Buy.Buy_ID,Book.Title,Buy.Date,Buy_Book.Buy_Price from Book,Buy,Buy_Book "
                    + "Where Book.ID=Buy_Book.B_ID AND Book.ID=Buy.B_ID";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            Buy_Table.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }

    void fillBor() {
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "Select Borrow.Bor_ID,Book.Title,Borrow.Return_Date,Member.Name from Book,Borrow,Member"
                    + " Where Book.ID=Borrow.B_ID AND Borrow.M_ID=Member.ID";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            Bor_Table.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
    }

    boolean ISstring(String x) {
        for (int i = 0; i < x.length(); i++) {
            if (Character.isDigit(x.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    boolean ISdouble(String x) {
        for (int i = 0; i < x.length(); i++) {
            if (!Character.isDigit(x.charAt(i)) && !(x.charAt(i) == '.')) {
                return false;
            }
        }
        return true;
    }

    boolean ISint(String x) {
        for (int i = 0; i < x.length(); i++) {
            if (!Character.isDigit(x.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    String removExtSpaces(String x) {
        StringBuilder sb= new StringBuilder(x);
        for (int i = 0; i < sb.length(); i++) {
            if (sb.charAt(i) == ' ') {
                sb.deleteCharAt(i);
            }
            else break;
        }
       for(int i=x.length()-1;i>=0;i--){
           if (sb.charAt(i) == ' ') {
                 sb.deleteCharAt(i);
             }
             else break;
        }
        
        return sb.toString();
    }

    boolean isDate(String date) {
        String cdate = "";
        Connection con = null;
        Statement stat = null;
        ResultSet res = null;
        try {
            con = DriverManager.getConnection(url);
            stat = con.createStatement();
            String sql = "select getDate() as date";
            System.out.println("SUCESS");
            res = stat.executeQuery(sql);
            if (res.next()) {
                cdate = res.getString("date").toString();
                cdate = cdate.substring(0, 10);
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                res.close();
                stat.close();
            } catch (Exception e) {
            }
        }
        if (date.length() != 10) {
            return false;
        }
        StringTokenizer st = new StringTokenizer(date, "-");
        String token;
        token = st.nextToken();
        int cd = Integer.parseInt(cdate.substring(0, 4));
        int d = Integer.parseInt(date.substring(0, 4));
        if (token.length() != 4 || cd > d || d < 0 || d > 2050) {
            return false;
        }
        d = Integer.parseInt(date.substring(5, 7));
        cd = Integer.parseInt(cdate.substring(5, 7));
        token = st.nextToken();
        if (token.length() != 2 || cd > d || d < 0 || d > 12) {
            return false;
        }
        token = st.nextToken();
        d = Integer.parseInt(date.substring(8));
        cd = Integer.parseInt(cdate.substring(8));
        if (token.length() != 2 || cd > d || d < 0 || d > 31) {
            return false;
        }
        return true;
    }
/*
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
     //   <editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
     //   </editor-fold>
           
        /* Create and display the form */
         SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new Prg().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private javax.swing.JButton ADD_TO_BUY_LIST;
    private javax.swing.JButton ADD_TO_Bor_LIST;
    private javax.swing.JTextField Author;
    private javax.swing.JTextField BDate;
    private javax.swing.JTextField B_ID;
    private javax.swing.JTextField B_Name;
    private javax.swing.JButton Back_Bor;
    private javax.swing.JButton Back_Buy;
    private javax.swing.JList<String> Books_Bor_List;
    private javax.swing.JList<String> Books_Buy_List;
    private javax.swing.JList<String> Bor_List;
    private javax.swing.JTextField Bor_Price;
    private javax.swing.JTextField Bor_Quantity;
    private javax.swing.JTextField Bor_Search;
    private javax.swing.JTable Bor_Table;
    private javax.swing.JPanel Borrow;
    private javax.swing.JButton BorrowOpertion;
    private javax.swing.JPanel Buy;
    private javax.swing.JButton BuyOperation;
    private javax.swing.JList<String> Buy_List;
    private javax.swing.JTextField Buy_Price;
    private javax.swing.JTextField Buy_Quantity;
    private javax.swing.JTextField Buy_Search;
    private javax.swing.JTable Buy_Table;
    private javax.swing.JTextField Category;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Delete_Buy;
    private javax.swing.JTextField Email;
    private javax.swing.JScrollPane Jscroll;
    private javax.swing.JTextField New_SSN;
    private javax.swing.JTextField Phone;
    private javax.swing.JTextField Publisher;
    private javax.swing.JButton Return_Bor_To__Store;
    private javax.swing.JButton Return_To_Store;
    private javax.swing.JTextField SSN;
    private javax.swing.JPanel Sales;
    private javax.swing.JButton Save_Member;
    private javax.swing.JButton Search_SSN;
    private javax.swing.JPanel Store;
    private javax.swing.JTable Table;
    private javax.swing.JButton Update;
    private javax.swing.JTextField UserName;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane6;
    private java.awt.PopupMenu popupMenu1;
    // End of variables declaration//GEN-END:variables
}
